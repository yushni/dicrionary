// Code generated by go-swagger; DO NOT EDIT.

package words

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWordHandlerFunc turns a function with the right signature into a get word handler
type GetWordHandlerFunc func(GetWordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWordHandlerFunc) Handle(params GetWordParams) middleware.Responder {
	return fn(params)
}

// GetWordHandler interface for that can handle valid get word params
type GetWordHandler interface {
	Handle(GetWordParams) middleware.Responder
}

// NewGetWord creates a new http.Handler for the get word operation
func NewGetWord(ctx *middleware.Context, handler GetWordHandler) *GetWord {
	return &GetWord{Context: ctx, Handler: handler}
}

/* GetWord swagger:route GET /words/{wordId} words getWord

Get word by ID

*/
type GetWord struct {
	Context *middleware.Context
	Handler GetWordHandler
}

func (o *GetWord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
